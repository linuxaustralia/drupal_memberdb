<?php
/**
 * Provide webform module with a list of vote options.
 */
function memberdb_webform_webform_options_votes() {
  return array(
    'Y' => t('Yes'),
    'N' => t('No'),
    'A' => t('Abstain'),
  );
}

/**
 * Backward compatibility callback?
 */
function memberdbtoboggan_webform_webform_options_votes() {
  return memberdb_webform_webform_options_votes();
}

/**
 * Implementation of hook_webform_validation_validators().
 */
function memberdb_webform_webform_validation_validators() {
  return array(
    'memberdb_email' => array(
      'name' => "MemberDB email",
      'component_types' => array(
        'email',
      ),
      'max_components' => 1,
      'description' => t('Verifies that the entered email address is present in MemberDB'),
    ),
  );
}

/**
 * Implementation of hook_webform_validation_validate().
 */
function memberdb_webform_webform_validation_validate($validator_name, $items, $components, $rule) {
  $version = $version = webform_validation_check_version();
  $check_false_callback = ($version == 3) ? '_webform_validation_check_false' : NULL;

  if (empty($items))
    return;

  switch($validator_name) {
    case 'memberdb_email':
      foreach ($items as $key => $val) {
        db_set_active('memberdb');
        $email = db_result(db_query("SELECT email FROM members WHERE email = '%s'", $val));
        db_set_active();
        if (empty($email) || !valid_email_address($email)) {
          $errors[$key] = t('%item needs to be a valid MemberDB login email', array('%item' => $components[$key]['name']));
        }
        return $errors;
        break;
      }
  }
}
