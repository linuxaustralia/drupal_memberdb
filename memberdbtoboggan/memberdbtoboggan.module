<?php
/**
 * Implementation of hook_menu()
 */
function memberdbtoboggan_menu() {
  $items = array();
  $items['admin/user/memberdbtoboggan'] = array(
    'title' => 'MemberDBToboggan',
    'description' => 'Configure settings for the MemberDB Toboggan module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('memberdbtoboggan_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer memberdb'),
    'file' => 'memberdbtoboggan.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implementation of hook_form_alter()
 *
 * Verify user login against MemberDB MySQL backend
 * and update in Drupal if required.
 */
function memberdbtoboggan_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
      $form['#validate'] = is_array($form['#validate']) ? $form['#validate'] : array();
      // Our validate function *MUST* run first.
      array_unshift($form['#validate'], 'memberdbtoboggan_user_login_validate');
      break;

    case 'user_profile_form':
      // Append our own submit handler.
      $form['#submit'] = is_array($form['#submit']) ? $form['#submit'] : array();
      // Our submit function must run first or the user's account status will
      // get updated first and then our check if their status is changing fails
      array_unshift($form['#submit'], 'memberdbtoboggan_profile_form_submit');
      break;
  }
}

/**
 * Override the login form validator and check the user against the
 * MemberDB database.
 */
function memberdbtoboggan_user_login_validate($form, &$form_state) {

  if (isset($form_state['values']['name']) && $form_state['values']['name'] && isset($form_state['values']['pass']) && $form_state['values']['pass']) {
    // Do not do this for uid 1. Ever.
    $account = user_load(array('name' => $form_state['values']['name']));
    if ($account->uid == 1) {
      return;
    }

    // If logintoboggan enabled and email in use on Drupal with a
    // non-automagic account, do not login via MemberDB.
    if (module_exists('logintoboggan')) {
      if (db_result(db_query("SELECT uid FROM {users} WHERE mail LIKE '%s' AND name NOT LIKE '%s%%'", $form_state['values']['name'], variable_get('memberdbtoboggan_prefix', 'la')))) {
        return;
      }
    }

    // Select all the info we need from MemberDB.
    db_set_active('memberdb');
    $row = db_fetch_object(db_query("SELECT p.member_id, p.salt, p.password, m.email, m.first_name, m.last_name FROM passwd AS p LEFT JOIN members AS m ON(p.member_id = m.id) WHERE m.email = '%s' LIMIT 1", $form_state['values']['name']));
    db_set_active();

    // This means the user exists in MemberDB with the given email address.
    if (!empty($row) && valid_email_address($form_state['values']['name'])) {

      // MemberDB seems to need these. keep them.
      ereg("^[0-9a-z]+", $row->password, $dbpass);
      ereg("^[0-9a-zA-Z]+", $row->salt, $dbsalt);

      // Check if login is correct.
      if (md5($dbsalt[0].$form_state['values']['pass']) == $dbpass[0]) {

        // Transpose the email address and overwrite it.
        $email = $form_state['values']['name'];
        form_set_value($form['name'], memberdbtoboggan_make_username($row->member_id), $form_state);

        // If this username does not exist in the Drupal database, init a
        // new user and save it. If it does exist, make sure the password
        // in Drupal is updated to match the MemberDB one, so the auth check
        // that runs in user.module after this validator will succeed.
        if ($account->uid == 0) {
          $user_attributes = array(
            'name' => $form_state['values']['name'],
            'pass' => $form_state['values']['pass'],
            'mail' => $email,
            'roles' => array(DRUPAL_AUTHENTICATED_RID),
            'status' => TRUE,
          );

          // Set the user profile, if one exists.
          if (module_exists('profile')) {
            if ($field = variable_get('memberdbtoboggan_profile_firstname', 0)) {
              $user_attributes[$field] = $row->first_name;
            }
            if ($field = variable_get('memberdbtoboggan_profile_surname', 0)) {
              $user_attributes[$field] = $row->last_name;
            }
            if ($field = variable_get('memberdbtoboggan_memberdb_id', 0)) {
              $user_attributes[$field] = $row->member_id;
            }
          }

          $new_user = user_save(
            new stdClass(),
            $user_attributes
          );

          // If set, assign a given role.
          $rid = variable_get('memberdbtoboggan_rid', 0);
          if (!empty($rid)) {
            $role = db_result(db_query("SELECT name FROM {role} WHERE rid = %d", $rid));
            $roles = array_merge($new_user->roles, array($rid => $role));
            user_save($new_user, array('roles' => $roles));
          }
        }
        else  {
          db_query("UPDATE {users} SET pass = MD5('%s') WHERE uid = %d", $form_state['values']['pass'], $account->uid);
        }
      }
    }
  }
}

/**
 * Submit handler for the user/%/edit form.
 */
function memberdbtoboggan_profile_form_submit($form, &$form_state) {
  if (isset($form_state['values']['pass']) && $form_state['values']['pass']) {
    // The user name is not present in the form if the user has no
    // permissions to edit it. In that case, use the user id from the url.
    if (isset($form_state['values']['name'])) {
      $name = $form_state['values']['name'];
    }
    else {
      $account = user_load(arg(1));
      $name = $account->name;
    }

    db_set_active('memberdb');
    db_query("UPDATE {users} SET pass = MD5('%s') WHERE username = '%s'", $form_state['values']['pass'], $name);
    db_set_active();
  }
}

/**
 * Implements hook_user().
 */
function memberdbtoboggin_user($op, &$edit, &$account, $category = NULL) {
  // Check if the user is current in MemberDB. Set member role if so.
  if ($op == 'login') {
    if ($member_id = memberdb_user_is_member($account)) {
      $roles = $account->roles;
      $roles += array_filter(variable_get('memberdb_role', array()));
      user_save($account, array('roles' => $roles));

      if ($field = variable_get('memberdbtoboggan_memberdb_id', 0)) {
        user_save($account, array($field => $member_id));
      }
    }
  }
}

/**
 * Implementation of hook_webform_select_options_info()
 */

function memberdbtoboggan_webform_select_options_info() {
  $items = array();

  $items['votes'] = array(
    'title' => t('MemberDB: Vote options'),
    'options callback' => 'memberdbtoboggan_webform_options_votes',
  );
  return $items;
}

// ----------------------------------------------------------

/**
 * Helper to generate a username.
 */
function memberdbtoboggan_make_username($id) {
  return sprintf("%s%05d", variable_get('memberdbtoboggan_prefix', 'la'), $id);
}

/**
 * Provide webform module with a list of vote options.
 */
function memberdbtoboggan_webform_options_votes() {
  return array(
    'Y' => t('Yes'),
    'N' => t('No'),
    'A' => t('Abstain'),
  );
}

/**
 * Return a list of profile field names.
 */
function memberdbtoboggan_profile_fields() {
  $fields = array();
  $categories = profile_categories();
  foreach ($categories as $category) {
    $result = _profile_get_fields($category['name']);
    while ($field = db_fetch_object($result)) {
      $fields[$field->name] = t('!title (!category)', array('!title' => $field->title, '!category' => $field->category));
    }
  }
  return $fields;
}
